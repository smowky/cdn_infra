---
# setup default firewall
- name: Add custom rules UFW
  ufw:
    rule: "{{ item.rule }}"
    interface: "{{ item.interface | default('') }}"
    direction: "{{ item.direction | default('in') }}"
    from_ip: "{{ item.from_ip | default('any') }}"
    to_ip: "{{ item.to_ip | default('any') }}"
    from_port: "{{ item.from_port | default('') }}"
    to_port: "{{ item.to_port | default('') }}"
    protocol: "{{ item.protocol | default('any') }}"
    log: "{{ item.log | default(False) }}"
    insert: "{{ item.insert | default(omit) }}"
    comment: "{{ item.comment | default('') }}"
  when: ufw_rules_elasticsearch is defined
  with_items: "{{ ufw_rules_elasticsearch }}"
  notify: reload ufw

- name: Create stack directory
  file:
    path: "{{ swarm_elasticsearch_stack_dir }}"
    state: directory

- name: Copy elasticsearch stack prescription
  template:
    src: "elasticsearch_stack.yml.j2"
    dest: "{{ swarm_elasticsearch_stack_dir }}/elasticsearch_stack.yml"
    lstrip_blocks: yes
    mode: '600'

- name: Create elasticsearch config directory
  file:
    path: "{{ swarm_elasticsearch_config_dir }}"
    state: directory

- name: Copy elasticsearch config prescription
  template:
    src: "elasticsearch_config.yml.j2"
    dest: "{{ swarm_elasticsearch_config_dir }}/elasticsearch.yml"
    lstrip_blocks: yes
    mode: '600'

- name: Create elastic-intranet network
  docker_network:
    name: 'elasticsearch_default'
    driver: overlay
    scope: swarm

- name: Create docker secret with admin password
  docker_secret:
    name: "{{ item.swarm_secret_name }}"
    data: "{{ item.swarm_secret_value }}"
  loop:
    - { swarm_secret_name: elasticsearch_password, swarm_secret_value: "{{ swarm_elasticsearch_password }}" } 
    - { swarm_secret_name: kibana_password, swarm_secret_value: "{{ swarm_kibana_password }}" } 

- name: Ensure there is elasticsearch
  docker_stack:
    state: present
    name: elasticsearch
    compose:
      - "{{ swarm_elasticsearch_stack_dir }}/elasticsearch_stack.yml"
  tags: stack-reload

- name: Enable nginx kibana vhost on hypervisor
  template:
    src: 'kibana_vhost.conf.j2'
    dest: "{{ nginx_vhost_directory }}/kibana.conf"
  notify:
    - Reload native nginx
